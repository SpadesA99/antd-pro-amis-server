// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1--rc1
// source: webapi.proto

package webapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WebapiClient is the client API for Webapi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebapiClient interface {
	//AmisSchema
	//根据路由获取AmisSchema
	GetAmisSchema(ctx context.Context, in *GetAmisSchemaReq, opts ...grpc.CallOption) (*GetAmisSchemaReply, error)
	//更新AmisSchema或者添加AmisSchema
	UpdateAmisSchema(ctx context.Context, in *UpdateAmisSchemaReq, opts ...grpc.CallOption) (*UpdateAmisSchemaReply, error)
	//菜单角色管理
	AddMenuRole(ctx context.Context, in *MenuRoleReq, opts ...grpc.CallOption) (*MenuRoleReply, error)
	DelMenuRole(ctx context.Context, in *MenuRoleReq, opts ...grpc.CallOption) (*MenuRoleReply, error)
	GetMenuRole(ctx context.Context, in *GetMenuRoleReq, opts ...grpc.CallOption) (*GetMenuRoleReply, error)
	//菜单管理
	AddMenu(ctx context.Context, in *AddMenuReq, opts ...grpc.CallOption) (*AddMenuReply, error)
	GetMenu(ctx context.Context, in *GetMenuReq, opts ...grpc.CallOption) (*GetMenuReply, error)
	DelMenu(ctx context.Context, in *DelMenuReq, opts ...grpc.CallOption) (*DelMenuReply, error)
	UpdateMenu(ctx context.Context, in *UpdateMenuReq, opts ...grpc.CallOption) (*UpdateMenuReply, error)
	BulkDelMenu(ctx context.Context, in *BulkDelMenuReq, opts ...grpc.CallOption) (*DelMenuReply, error)
	OrderMenu(ctx context.Context, in *OrderMenuReq, opts ...grpc.CallOption) (*OrderMenuReply, error)
	GetMenuTree(ctx context.Context, in *GetMenuTreeReq, opts ...grpc.CallOption) (*GetMenuTreeReply, error)
}

type webapiClient struct {
	cc grpc.ClientConnInterface
}

func NewWebapiClient(cc grpc.ClientConnInterface) WebapiClient {
	return &webapiClient{cc}
}

func (c *webapiClient) GetAmisSchema(ctx context.Context, in *GetAmisSchemaReq, opts ...grpc.CallOption) (*GetAmisSchemaReply, error) {
	out := new(GetAmisSchemaReply)
	err := c.cc.Invoke(ctx, "/webapi.Webapi/GetAmisSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webapiClient) UpdateAmisSchema(ctx context.Context, in *UpdateAmisSchemaReq, opts ...grpc.CallOption) (*UpdateAmisSchemaReply, error) {
	out := new(UpdateAmisSchemaReply)
	err := c.cc.Invoke(ctx, "/webapi.Webapi/UpdateAmisSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webapiClient) AddMenuRole(ctx context.Context, in *MenuRoleReq, opts ...grpc.CallOption) (*MenuRoleReply, error) {
	out := new(MenuRoleReply)
	err := c.cc.Invoke(ctx, "/webapi.Webapi/AddMenuRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webapiClient) DelMenuRole(ctx context.Context, in *MenuRoleReq, opts ...grpc.CallOption) (*MenuRoleReply, error) {
	out := new(MenuRoleReply)
	err := c.cc.Invoke(ctx, "/webapi.Webapi/DelMenuRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webapiClient) GetMenuRole(ctx context.Context, in *GetMenuRoleReq, opts ...grpc.CallOption) (*GetMenuRoleReply, error) {
	out := new(GetMenuRoleReply)
	err := c.cc.Invoke(ctx, "/webapi.Webapi/GetMenuRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webapiClient) AddMenu(ctx context.Context, in *AddMenuReq, opts ...grpc.CallOption) (*AddMenuReply, error) {
	out := new(AddMenuReply)
	err := c.cc.Invoke(ctx, "/webapi.Webapi/AddMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webapiClient) GetMenu(ctx context.Context, in *GetMenuReq, opts ...grpc.CallOption) (*GetMenuReply, error) {
	out := new(GetMenuReply)
	err := c.cc.Invoke(ctx, "/webapi.Webapi/GetMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webapiClient) DelMenu(ctx context.Context, in *DelMenuReq, opts ...grpc.CallOption) (*DelMenuReply, error) {
	out := new(DelMenuReply)
	err := c.cc.Invoke(ctx, "/webapi.Webapi/DelMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webapiClient) UpdateMenu(ctx context.Context, in *UpdateMenuReq, opts ...grpc.CallOption) (*UpdateMenuReply, error) {
	out := new(UpdateMenuReply)
	err := c.cc.Invoke(ctx, "/webapi.Webapi/UpdateMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webapiClient) BulkDelMenu(ctx context.Context, in *BulkDelMenuReq, opts ...grpc.CallOption) (*DelMenuReply, error) {
	out := new(DelMenuReply)
	err := c.cc.Invoke(ctx, "/webapi.Webapi/BulkDelMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webapiClient) OrderMenu(ctx context.Context, in *OrderMenuReq, opts ...grpc.CallOption) (*OrderMenuReply, error) {
	out := new(OrderMenuReply)
	err := c.cc.Invoke(ctx, "/webapi.Webapi/OrderMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webapiClient) GetMenuTree(ctx context.Context, in *GetMenuTreeReq, opts ...grpc.CallOption) (*GetMenuTreeReply, error) {
	out := new(GetMenuTreeReply)
	err := c.cc.Invoke(ctx, "/webapi.Webapi/GetMenuTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebapiServer is the server API for Webapi service.
// All implementations must embed UnimplementedWebapiServer
// for forward compatibility
type WebapiServer interface {
	//AmisSchema
	//根据路由获取AmisSchema
	GetAmisSchema(context.Context, *GetAmisSchemaReq) (*GetAmisSchemaReply, error)
	//更新AmisSchema或者添加AmisSchema
	UpdateAmisSchema(context.Context, *UpdateAmisSchemaReq) (*UpdateAmisSchemaReply, error)
	//菜单角色管理
	AddMenuRole(context.Context, *MenuRoleReq) (*MenuRoleReply, error)
	DelMenuRole(context.Context, *MenuRoleReq) (*MenuRoleReply, error)
	GetMenuRole(context.Context, *GetMenuRoleReq) (*GetMenuRoleReply, error)
	//菜单管理
	AddMenu(context.Context, *AddMenuReq) (*AddMenuReply, error)
	GetMenu(context.Context, *GetMenuReq) (*GetMenuReply, error)
	DelMenu(context.Context, *DelMenuReq) (*DelMenuReply, error)
	UpdateMenu(context.Context, *UpdateMenuReq) (*UpdateMenuReply, error)
	BulkDelMenu(context.Context, *BulkDelMenuReq) (*DelMenuReply, error)
	OrderMenu(context.Context, *OrderMenuReq) (*OrderMenuReply, error)
	GetMenuTree(context.Context, *GetMenuTreeReq) (*GetMenuTreeReply, error)
	mustEmbedUnimplementedWebapiServer()
}

// UnimplementedWebapiServer must be embedded to have forward compatible implementations.
type UnimplementedWebapiServer struct {
}

func (UnimplementedWebapiServer) GetAmisSchema(context.Context, *GetAmisSchemaReq) (*GetAmisSchemaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAmisSchema not implemented")
}
func (UnimplementedWebapiServer) UpdateAmisSchema(context.Context, *UpdateAmisSchemaReq) (*UpdateAmisSchemaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAmisSchema not implemented")
}
func (UnimplementedWebapiServer) AddMenuRole(context.Context, *MenuRoleReq) (*MenuRoleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMenuRole not implemented")
}
func (UnimplementedWebapiServer) DelMenuRole(context.Context, *MenuRoleReq) (*MenuRoleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelMenuRole not implemented")
}
func (UnimplementedWebapiServer) GetMenuRole(context.Context, *GetMenuRoleReq) (*GetMenuRoleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenuRole not implemented")
}
func (UnimplementedWebapiServer) AddMenu(context.Context, *AddMenuReq) (*AddMenuReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMenu not implemented")
}
func (UnimplementedWebapiServer) GetMenu(context.Context, *GetMenuReq) (*GetMenuReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenu not implemented")
}
func (UnimplementedWebapiServer) DelMenu(context.Context, *DelMenuReq) (*DelMenuReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelMenu not implemented")
}
func (UnimplementedWebapiServer) UpdateMenu(context.Context, *UpdateMenuReq) (*UpdateMenuReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMenu not implemented")
}
func (UnimplementedWebapiServer) BulkDelMenu(context.Context, *BulkDelMenuReq) (*DelMenuReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkDelMenu not implemented")
}
func (UnimplementedWebapiServer) OrderMenu(context.Context, *OrderMenuReq) (*OrderMenuReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderMenu not implemented")
}
func (UnimplementedWebapiServer) GetMenuTree(context.Context, *GetMenuTreeReq) (*GetMenuTreeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenuTree not implemented")
}
func (UnimplementedWebapiServer) mustEmbedUnimplementedWebapiServer() {}

// UnsafeWebapiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebapiServer will
// result in compilation errors.
type UnsafeWebapiServer interface {
	mustEmbedUnimplementedWebapiServer()
}

func RegisterWebapiServer(s grpc.ServiceRegistrar, srv WebapiServer) {
	s.RegisterService(&Webapi_ServiceDesc, srv)
}

func _Webapi_GetAmisSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAmisSchemaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebapiServer).GetAmisSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webapi.Webapi/GetAmisSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebapiServer).GetAmisSchema(ctx, req.(*GetAmisSchemaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Webapi_UpdateAmisSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAmisSchemaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebapiServer).UpdateAmisSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webapi.Webapi/UpdateAmisSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebapiServer).UpdateAmisSchema(ctx, req.(*UpdateAmisSchemaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Webapi_AddMenuRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebapiServer).AddMenuRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webapi.Webapi/AddMenuRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebapiServer).AddMenuRole(ctx, req.(*MenuRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Webapi_DelMenuRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebapiServer).DelMenuRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webapi.Webapi/DelMenuRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebapiServer).DelMenuRole(ctx, req.(*MenuRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Webapi_GetMenuRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMenuRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebapiServer).GetMenuRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webapi.Webapi/GetMenuRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebapiServer).GetMenuRole(ctx, req.(*GetMenuRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Webapi_AddMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebapiServer).AddMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webapi.Webapi/AddMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebapiServer).AddMenu(ctx, req.(*AddMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Webapi_GetMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebapiServer).GetMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webapi.Webapi/GetMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebapiServer).GetMenu(ctx, req.(*GetMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Webapi_DelMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebapiServer).DelMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webapi.Webapi/DelMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebapiServer).DelMenu(ctx, req.(*DelMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Webapi_UpdateMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebapiServer).UpdateMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webapi.Webapi/UpdateMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebapiServer).UpdateMenu(ctx, req.(*UpdateMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Webapi_BulkDelMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkDelMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebapiServer).BulkDelMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webapi.Webapi/BulkDelMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebapiServer).BulkDelMenu(ctx, req.(*BulkDelMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Webapi_OrderMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebapiServer).OrderMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webapi.Webapi/OrderMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebapiServer).OrderMenu(ctx, req.(*OrderMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Webapi_GetMenuTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMenuTreeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebapiServer).GetMenuTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webapi.Webapi/GetMenuTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebapiServer).GetMenuTree(ctx, req.(*GetMenuTreeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Webapi_ServiceDesc is the grpc.ServiceDesc for Webapi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Webapi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "webapi.Webapi",
	HandlerType: (*WebapiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAmisSchema",
			Handler:    _Webapi_GetAmisSchema_Handler,
		},
		{
			MethodName: "UpdateAmisSchema",
			Handler:    _Webapi_UpdateAmisSchema_Handler,
		},
		{
			MethodName: "AddMenuRole",
			Handler:    _Webapi_AddMenuRole_Handler,
		},
		{
			MethodName: "DelMenuRole",
			Handler:    _Webapi_DelMenuRole_Handler,
		},
		{
			MethodName: "GetMenuRole",
			Handler:    _Webapi_GetMenuRole_Handler,
		},
		{
			MethodName: "AddMenu",
			Handler:    _Webapi_AddMenu_Handler,
		},
		{
			MethodName: "GetMenu",
			Handler:    _Webapi_GetMenu_Handler,
		},
		{
			MethodName: "DelMenu",
			Handler:    _Webapi_DelMenu_Handler,
		},
		{
			MethodName: "UpdateMenu",
			Handler:    _Webapi_UpdateMenu_Handler,
		},
		{
			MethodName: "BulkDelMenu",
			Handler:    _Webapi_BulkDelMenu_Handler,
		},
		{
			MethodName: "OrderMenu",
			Handler:    _Webapi_OrderMenu_Handler,
		},
		{
			MethodName: "GetMenuTree",
			Handler:    _Webapi_GetMenuTree_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "webapi.proto",
}
