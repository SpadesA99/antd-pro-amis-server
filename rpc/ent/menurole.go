// Code generated by entc, DO NOT EDIT.

package ent

import (
	"antd-pro-amis-server/rpc/ent/menurole"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// MenuRole is the model entity for the MenuRole schema.
type MenuRole struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// RoleName holds the value of the "role_name" field.
	RoleName string `json:"role_name,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MenuRole) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case menurole.FieldID:
			values[i] = new(sql.NullInt64)
		case menurole.FieldRoleName:
			values[i] = new(sql.NullString)
		case menurole.FieldCreatedAt, menurole.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type MenuRole", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MenuRole fields.
func (mr *MenuRole) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case menurole.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mr.ID = int(value.Int64)
		case menurole.FieldRoleName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role_name", values[i])
			} else if value.Valid {
				mr.RoleName = value.String
			}
		case menurole.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				mr.CreatedAt = value.Time
			}
		case menurole.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				mr.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this MenuRole.
// Note that you need to call MenuRole.Unwrap() before calling this method if this MenuRole
// was returned from a transaction, and the transaction was committed or rolled back.
func (mr *MenuRole) Update() *MenuRoleUpdateOne {
	return (&MenuRoleClient{config: mr.config}).UpdateOne(mr)
}

// Unwrap unwraps the MenuRole entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mr *MenuRole) Unwrap() *MenuRole {
	tx, ok := mr.config.driver.(*txDriver)
	if !ok {
		panic("ent: MenuRole is not a transactional entity")
	}
	mr.config.driver = tx.drv
	return mr
}

// String implements the fmt.Stringer.
func (mr *MenuRole) String() string {
	var builder strings.Builder
	builder.WriteString("MenuRole(")
	builder.WriteString(fmt.Sprintf("id=%v", mr.ID))
	builder.WriteString(", role_name=")
	builder.WriteString(mr.RoleName)
	builder.WriteString(", created_at=")
	builder.WriteString(mr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(mr.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// MenuRoles is a parsable slice of MenuRole.
type MenuRoles []*MenuRole

func (mr MenuRoles) config(cfg config) {
	for _i := range mr {
		mr[_i].config = cfg
	}
}
