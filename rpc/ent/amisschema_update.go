// Code generated by entc, DO NOT EDIT.

package ent

import (
	"antd-pro-amis-server/rpc/ent/amisschema"
	"antd-pro-amis-server/rpc/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AmisSchemaUpdate is the builder for updating AmisSchema entities.
type AmisSchemaUpdate struct {
	config
	hooks    []Hook
	mutation *AmisSchemaMutation
}

// Where appends a list predicates to the AmisSchemaUpdate builder.
func (asu *AmisSchemaUpdate) Where(ps ...predicate.AmisSchema) *AmisSchemaUpdate {
	asu.mutation.Where(ps...)
	return asu
}

// SetRouter sets the "router" field.
func (asu *AmisSchemaUpdate) SetRouter(s string) *AmisSchemaUpdate {
	asu.mutation.SetRouter(s)
	return asu
}

// SetSchema sets the "schema" field.
func (asu *AmisSchemaUpdate) SetSchema(s string) *AmisSchemaUpdate {
	asu.mutation.SetSchema(s)
	return asu
}

// SetUpdatedAt sets the "updated_at" field.
func (asu *AmisSchemaUpdate) SetUpdatedAt(t time.Time) *AmisSchemaUpdate {
	asu.mutation.SetUpdatedAt(t)
	return asu
}

// Mutation returns the AmisSchemaMutation object of the builder.
func (asu *AmisSchemaUpdate) Mutation() *AmisSchemaMutation {
	return asu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (asu *AmisSchemaUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	asu.defaults()
	if len(asu.hooks) == 0 {
		affected, err = asu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AmisSchemaMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			asu.mutation = mutation
			affected, err = asu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(asu.hooks) - 1; i >= 0; i-- {
			if asu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = asu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, asu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (asu *AmisSchemaUpdate) SaveX(ctx context.Context) int {
	affected, err := asu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (asu *AmisSchemaUpdate) Exec(ctx context.Context) error {
	_, err := asu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asu *AmisSchemaUpdate) ExecX(ctx context.Context) {
	if err := asu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (asu *AmisSchemaUpdate) defaults() {
	if _, ok := asu.mutation.UpdatedAt(); !ok {
		v := amisschema.UpdateDefaultUpdatedAt()
		asu.mutation.SetUpdatedAt(v)
	}
}

func (asu *AmisSchemaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   amisschema.Table,
			Columns: amisschema.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: amisschema.FieldID,
			},
		},
	}
	if ps := asu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asu.mutation.Router(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: amisschema.FieldRouter,
		})
	}
	if value, ok := asu.mutation.Schema(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: amisschema.FieldSchema,
		})
	}
	if value, ok := asu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: amisschema.FieldUpdatedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, asu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{amisschema.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AmisSchemaUpdateOne is the builder for updating a single AmisSchema entity.
type AmisSchemaUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AmisSchemaMutation
}

// SetRouter sets the "router" field.
func (asuo *AmisSchemaUpdateOne) SetRouter(s string) *AmisSchemaUpdateOne {
	asuo.mutation.SetRouter(s)
	return asuo
}

// SetSchema sets the "schema" field.
func (asuo *AmisSchemaUpdateOne) SetSchema(s string) *AmisSchemaUpdateOne {
	asuo.mutation.SetSchema(s)
	return asuo
}

// SetUpdatedAt sets the "updated_at" field.
func (asuo *AmisSchemaUpdateOne) SetUpdatedAt(t time.Time) *AmisSchemaUpdateOne {
	asuo.mutation.SetUpdatedAt(t)
	return asuo
}

// Mutation returns the AmisSchemaMutation object of the builder.
func (asuo *AmisSchemaUpdateOne) Mutation() *AmisSchemaMutation {
	return asuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (asuo *AmisSchemaUpdateOne) Select(field string, fields ...string) *AmisSchemaUpdateOne {
	asuo.fields = append([]string{field}, fields...)
	return asuo
}

// Save executes the query and returns the updated AmisSchema entity.
func (asuo *AmisSchemaUpdateOne) Save(ctx context.Context) (*AmisSchema, error) {
	var (
		err  error
		node *AmisSchema
	)
	asuo.defaults()
	if len(asuo.hooks) == 0 {
		node, err = asuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AmisSchemaMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			asuo.mutation = mutation
			node, err = asuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(asuo.hooks) - 1; i >= 0; i-- {
			if asuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = asuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, asuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (asuo *AmisSchemaUpdateOne) SaveX(ctx context.Context) *AmisSchema {
	node, err := asuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (asuo *AmisSchemaUpdateOne) Exec(ctx context.Context) error {
	_, err := asuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asuo *AmisSchemaUpdateOne) ExecX(ctx context.Context) {
	if err := asuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (asuo *AmisSchemaUpdateOne) defaults() {
	if _, ok := asuo.mutation.UpdatedAt(); !ok {
		v := amisschema.UpdateDefaultUpdatedAt()
		asuo.mutation.SetUpdatedAt(v)
	}
}

func (asuo *AmisSchemaUpdateOne) sqlSave(ctx context.Context) (_node *AmisSchema, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   amisschema.Table,
			Columns: amisschema.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: amisschema.FieldID,
			},
		},
	}
	id, ok := asuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AmisSchema.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := asuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, amisschema.FieldID)
		for _, f := range fields {
			if !amisschema.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != amisschema.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := asuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asuo.mutation.Router(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: amisschema.FieldRouter,
		})
	}
	if value, ok := asuo.mutation.Schema(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: amisschema.FieldSchema,
		})
	}
	if value, ok := asuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: amisschema.FieldUpdatedAt,
		})
	}
	_node = &AmisSchema{config: asuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, asuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{amisschema.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
