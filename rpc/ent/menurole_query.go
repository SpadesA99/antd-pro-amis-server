// Code generated by entc, DO NOT EDIT.

package ent

import (
	"antd-pro-amis-server/rpc/ent/menurole"
	"antd-pro-amis-server/rpc/ent/predicate"
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MenuRoleQuery is the builder for querying MenuRole entities.
type MenuRoleQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.MenuRole
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the MenuRoleQuery builder.
func (mrq *MenuRoleQuery) Where(ps ...predicate.MenuRole) *MenuRoleQuery {
	mrq.predicates = append(mrq.predicates, ps...)
	return mrq
}

// Limit adds a limit step to the query.
func (mrq *MenuRoleQuery) Limit(limit int) *MenuRoleQuery {
	mrq.limit = &limit
	return mrq
}

// Offset adds an offset step to the query.
func (mrq *MenuRoleQuery) Offset(offset int) *MenuRoleQuery {
	mrq.offset = &offset
	return mrq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (mrq *MenuRoleQuery) Unique(unique bool) *MenuRoleQuery {
	mrq.unique = &unique
	return mrq
}

// Order adds an order step to the query.
func (mrq *MenuRoleQuery) Order(o ...OrderFunc) *MenuRoleQuery {
	mrq.order = append(mrq.order, o...)
	return mrq
}

// First returns the first MenuRole entity from the query.
// Returns a *NotFoundError when no MenuRole was found.
func (mrq *MenuRoleQuery) First(ctx context.Context) (*MenuRole, error) {
	nodes, err := mrq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{menurole.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (mrq *MenuRoleQuery) FirstX(ctx context.Context) *MenuRole {
	node, err := mrq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first MenuRole ID from the query.
// Returns a *NotFoundError when no MenuRole ID was found.
func (mrq *MenuRoleQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = mrq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{menurole.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (mrq *MenuRoleQuery) FirstIDX(ctx context.Context) int {
	id, err := mrq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single MenuRole entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one MenuRole entity is found.
// Returns a *NotFoundError when no MenuRole entities are found.
func (mrq *MenuRoleQuery) Only(ctx context.Context) (*MenuRole, error) {
	nodes, err := mrq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{menurole.Label}
	default:
		return nil, &NotSingularError{menurole.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (mrq *MenuRoleQuery) OnlyX(ctx context.Context) *MenuRole {
	node, err := mrq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only MenuRole ID in the query.
// Returns a *NotSingularError when more than one MenuRole ID is found.
// Returns a *NotFoundError when no entities are found.
func (mrq *MenuRoleQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = mrq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{menurole.Label}
	default:
		err = &NotSingularError{menurole.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (mrq *MenuRoleQuery) OnlyIDX(ctx context.Context) int {
	id, err := mrq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of MenuRoles.
func (mrq *MenuRoleQuery) All(ctx context.Context) ([]*MenuRole, error) {
	if err := mrq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return mrq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (mrq *MenuRoleQuery) AllX(ctx context.Context) []*MenuRole {
	nodes, err := mrq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of MenuRole IDs.
func (mrq *MenuRoleQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := mrq.Select(menurole.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (mrq *MenuRoleQuery) IDsX(ctx context.Context) []int {
	ids, err := mrq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (mrq *MenuRoleQuery) Count(ctx context.Context) (int, error) {
	if err := mrq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return mrq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (mrq *MenuRoleQuery) CountX(ctx context.Context) int {
	count, err := mrq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (mrq *MenuRoleQuery) Exist(ctx context.Context) (bool, error) {
	if err := mrq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return mrq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (mrq *MenuRoleQuery) ExistX(ctx context.Context) bool {
	exist, err := mrq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the MenuRoleQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (mrq *MenuRoleQuery) Clone() *MenuRoleQuery {
	if mrq == nil {
		return nil
	}
	return &MenuRoleQuery{
		config:     mrq.config,
		limit:      mrq.limit,
		offset:     mrq.offset,
		order:      append([]OrderFunc{}, mrq.order...),
		predicates: append([]predicate.MenuRole{}, mrq.predicates...),
		// clone intermediate query.
		sql:    mrq.sql.Clone(),
		path:   mrq.path,
		unique: mrq.unique,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		RoleName string `json:"role_name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.MenuRole.Query().
//		GroupBy(menurole.FieldRoleName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (mrq *MenuRoleQuery) GroupBy(field string, fields ...string) *MenuRoleGroupBy {
	group := &MenuRoleGroupBy{config: mrq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := mrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return mrq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		RoleName string `json:"role_name,omitempty"`
//	}
//
//	client.MenuRole.Query().
//		Select(menurole.FieldRoleName).
//		Scan(ctx, &v)
//
func (mrq *MenuRoleQuery) Select(fields ...string) *MenuRoleSelect {
	mrq.fields = append(mrq.fields, fields...)
	return &MenuRoleSelect{MenuRoleQuery: mrq}
}

func (mrq *MenuRoleQuery) prepareQuery(ctx context.Context) error {
	for _, f := range mrq.fields {
		if !menurole.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if mrq.path != nil {
		prev, err := mrq.path(ctx)
		if err != nil {
			return err
		}
		mrq.sql = prev
	}
	return nil
}

func (mrq *MenuRoleQuery) sqlAll(ctx context.Context) ([]*MenuRole, error) {
	var (
		nodes = []*MenuRole{}
		_spec = mrq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &MenuRole{config: mrq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, mrq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (mrq *MenuRoleQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := mrq.querySpec()
	_spec.Node.Columns = mrq.fields
	if len(mrq.fields) > 0 {
		_spec.Unique = mrq.unique != nil && *mrq.unique
	}
	return sqlgraph.CountNodes(ctx, mrq.driver, _spec)
}

func (mrq *MenuRoleQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := mrq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (mrq *MenuRoleQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   menurole.Table,
			Columns: menurole.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: menurole.FieldID,
			},
		},
		From:   mrq.sql,
		Unique: true,
	}
	if unique := mrq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := mrq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, menurole.FieldID)
		for i := range fields {
			if fields[i] != menurole.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := mrq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := mrq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := mrq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := mrq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (mrq *MenuRoleQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(mrq.driver.Dialect())
	t1 := builder.Table(menurole.Table)
	columns := mrq.fields
	if len(columns) == 0 {
		columns = menurole.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if mrq.sql != nil {
		selector = mrq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if mrq.unique != nil && *mrq.unique {
		selector.Distinct()
	}
	for _, p := range mrq.predicates {
		p(selector)
	}
	for _, p := range mrq.order {
		p(selector)
	}
	if offset := mrq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := mrq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// MenuRoleGroupBy is the group-by builder for MenuRole entities.
type MenuRoleGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (mrgb *MenuRoleGroupBy) Aggregate(fns ...AggregateFunc) *MenuRoleGroupBy {
	mrgb.fns = append(mrgb.fns, fns...)
	return mrgb
}

// Scan applies the group-by query and scans the result into the given value.
func (mrgb *MenuRoleGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := mrgb.path(ctx)
	if err != nil {
		return err
	}
	mrgb.sql = query
	return mrgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (mrgb *MenuRoleGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := mrgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (mrgb *MenuRoleGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(mrgb.fields) > 1 {
		return nil, errors.New("ent: MenuRoleGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := mrgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (mrgb *MenuRoleGroupBy) StringsX(ctx context.Context) []string {
	v, err := mrgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (mrgb *MenuRoleGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = mrgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{menurole.Label}
	default:
		err = fmt.Errorf("ent: MenuRoleGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (mrgb *MenuRoleGroupBy) StringX(ctx context.Context) string {
	v, err := mrgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (mrgb *MenuRoleGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(mrgb.fields) > 1 {
		return nil, errors.New("ent: MenuRoleGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := mrgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (mrgb *MenuRoleGroupBy) IntsX(ctx context.Context) []int {
	v, err := mrgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (mrgb *MenuRoleGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = mrgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{menurole.Label}
	default:
		err = fmt.Errorf("ent: MenuRoleGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (mrgb *MenuRoleGroupBy) IntX(ctx context.Context) int {
	v, err := mrgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (mrgb *MenuRoleGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(mrgb.fields) > 1 {
		return nil, errors.New("ent: MenuRoleGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := mrgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (mrgb *MenuRoleGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := mrgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (mrgb *MenuRoleGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = mrgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{menurole.Label}
	default:
		err = fmt.Errorf("ent: MenuRoleGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (mrgb *MenuRoleGroupBy) Float64X(ctx context.Context) float64 {
	v, err := mrgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (mrgb *MenuRoleGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(mrgb.fields) > 1 {
		return nil, errors.New("ent: MenuRoleGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := mrgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (mrgb *MenuRoleGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := mrgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (mrgb *MenuRoleGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = mrgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{menurole.Label}
	default:
		err = fmt.Errorf("ent: MenuRoleGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (mrgb *MenuRoleGroupBy) BoolX(ctx context.Context) bool {
	v, err := mrgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (mrgb *MenuRoleGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range mrgb.fields {
		if !menurole.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := mrgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mrgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (mrgb *MenuRoleGroupBy) sqlQuery() *sql.Selector {
	selector := mrgb.sql.Select()
	aggregation := make([]string, 0, len(mrgb.fns))
	for _, fn := range mrgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(mrgb.fields)+len(mrgb.fns))
		for _, f := range mrgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(mrgb.fields...)...)
}

// MenuRoleSelect is the builder for selecting fields of MenuRole entities.
type MenuRoleSelect struct {
	*MenuRoleQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (mrs *MenuRoleSelect) Scan(ctx context.Context, v interface{}) error {
	if err := mrs.prepareQuery(ctx); err != nil {
		return err
	}
	mrs.sql = mrs.MenuRoleQuery.sqlQuery(ctx)
	return mrs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (mrs *MenuRoleSelect) ScanX(ctx context.Context, v interface{}) {
	if err := mrs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (mrs *MenuRoleSelect) Strings(ctx context.Context) ([]string, error) {
	if len(mrs.fields) > 1 {
		return nil, errors.New("ent: MenuRoleSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := mrs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (mrs *MenuRoleSelect) StringsX(ctx context.Context) []string {
	v, err := mrs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (mrs *MenuRoleSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = mrs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{menurole.Label}
	default:
		err = fmt.Errorf("ent: MenuRoleSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (mrs *MenuRoleSelect) StringX(ctx context.Context) string {
	v, err := mrs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (mrs *MenuRoleSelect) Ints(ctx context.Context) ([]int, error) {
	if len(mrs.fields) > 1 {
		return nil, errors.New("ent: MenuRoleSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := mrs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (mrs *MenuRoleSelect) IntsX(ctx context.Context) []int {
	v, err := mrs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (mrs *MenuRoleSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = mrs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{menurole.Label}
	default:
		err = fmt.Errorf("ent: MenuRoleSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (mrs *MenuRoleSelect) IntX(ctx context.Context) int {
	v, err := mrs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (mrs *MenuRoleSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(mrs.fields) > 1 {
		return nil, errors.New("ent: MenuRoleSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := mrs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (mrs *MenuRoleSelect) Float64sX(ctx context.Context) []float64 {
	v, err := mrs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (mrs *MenuRoleSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = mrs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{menurole.Label}
	default:
		err = fmt.Errorf("ent: MenuRoleSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (mrs *MenuRoleSelect) Float64X(ctx context.Context) float64 {
	v, err := mrs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (mrs *MenuRoleSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(mrs.fields) > 1 {
		return nil, errors.New("ent: MenuRoleSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := mrs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (mrs *MenuRoleSelect) BoolsX(ctx context.Context) []bool {
	v, err := mrs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (mrs *MenuRoleSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = mrs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{menurole.Label}
	default:
		err = fmt.Errorf("ent: MenuRoleSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (mrs *MenuRoleSelect) BoolX(ctx context.Context) bool {
	v, err := mrs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (mrs *MenuRoleSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := mrs.sql.Query()
	if err := mrs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
