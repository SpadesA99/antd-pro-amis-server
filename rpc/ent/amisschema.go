// Code generated by entc, DO NOT EDIT.

package ent

import (
	"antd-pro-amis-server/rpc/ent/amisschema"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// AmisSchema is the model entity for the AmisSchema schema.
type AmisSchema struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Router holds the value of the "router" field.
	Router string `json:"router,omitempty"`
	// Schema holds the value of the "schema" field.
	Schema string `json:"schema,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AmisSchema) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case amisschema.FieldID:
			values[i] = new(sql.NullInt64)
		case amisschema.FieldRouter, amisschema.FieldSchema:
			values[i] = new(sql.NullString)
		case amisschema.FieldCreatedAt, amisschema.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AmisSchema", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AmisSchema fields.
func (as *AmisSchema) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case amisschema.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			as.ID = int(value.Int64)
		case amisschema.FieldRouter:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field router", values[i])
			} else if value.Valid {
				as.Router = value.String
			}
		case amisschema.FieldSchema:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field schema", values[i])
			} else if value.Valid {
				as.Schema = value.String
			}
		case amisschema.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				as.CreatedAt = value.Time
			}
		case amisschema.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				as.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this AmisSchema.
// Note that you need to call AmisSchema.Unwrap() before calling this method if this AmisSchema
// was returned from a transaction, and the transaction was committed or rolled back.
func (as *AmisSchema) Update() *AmisSchemaUpdateOne {
	return (&AmisSchemaClient{config: as.config}).UpdateOne(as)
}

// Unwrap unwraps the AmisSchema entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (as *AmisSchema) Unwrap() *AmisSchema {
	tx, ok := as.config.driver.(*txDriver)
	if !ok {
		panic("ent: AmisSchema is not a transactional entity")
	}
	as.config.driver = tx.drv
	return as
}

// String implements the fmt.Stringer.
func (as *AmisSchema) String() string {
	var builder strings.Builder
	builder.WriteString("AmisSchema(")
	builder.WriteString(fmt.Sprintf("id=%v", as.ID))
	builder.WriteString(", router=")
	builder.WriteString(as.Router)
	builder.WriteString(", schema=")
	builder.WriteString(as.Schema)
	builder.WriteString(", created_at=")
	builder.WriteString(as.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(as.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AmisSchemas is a parsable slice of AmisSchema.
type AmisSchemas []*AmisSchema

func (as AmisSchemas) config(cfg config) {
	for _i := range as {
		as[_i].config = cfg
	}
}
