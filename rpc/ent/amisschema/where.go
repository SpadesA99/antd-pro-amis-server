// Code generated by entc, DO NOT EDIT.

package amisschema

import (
	"antd-pro-amis-server/rpc/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.AmisSchema {
	return predicate.AmisSchema(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.AmisSchema {
	return predicate.AmisSchema(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.AmisSchema {
	return predicate.AmisSchema(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.AmisSchema {
	return predicate.AmisSchema(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.AmisSchema {
	return predicate.AmisSchema(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.AmisSchema {
	return predicate.AmisSchema(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.AmisSchema {
	return predicate.AmisSchema(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.AmisSchema {
	return predicate.AmisSchema(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.AmisSchema {
	return predicate.AmisSchema(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Router applies equality check predicate on the "router" field. It's identical to RouterEQ.
func Router(v string) predicate.AmisSchema {
	return predicate.AmisSchema(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRouter), v))
	})
}

// Schema applies equality check predicate on the "schema" field. It's identical to SchemaEQ.
func Schema(v string) predicate.AmisSchema {
	return predicate.AmisSchema(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSchema), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.AmisSchema {
	return predicate.AmisSchema(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.AmisSchema {
	return predicate.AmisSchema(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// RouterEQ applies the EQ predicate on the "router" field.
func RouterEQ(v string) predicate.AmisSchema {
	return predicate.AmisSchema(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRouter), v))
	})
}

// RouterNEQ applies the NEQ predicate on the "router" field.
func RouterNEQ(v string) predicate.AmisSchema {
	return predicate.AmisSchema(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRouter), v))
	})
}

// RouterIn applies the In predicate on the "router" field.
func RouterIn(vs ...string) predicate.AmisSchema {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AmisSchema(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRouter), v...))
	})
}

// RouterNotIn applies the NotIn predicate on the "router" field.
func RouterNotIn(vs ...string) predicate.AmisSchema {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AmisSchema(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRouter), v...))
	})
}

// RouterGT applies the GT predicate on the "router" field.
func RouterGT(v string) predicate.AmisSchema {
	return predicate.AmisSchema(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRouter), v))
	})
}

// RouterGTE applies the GTE predicate on the "router" field.
func RouterGTE(v string) predicate.AmisSchema {
	return predicate.AmisSchema(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRouter), v))
	})
}

// RouterLT applies the LT predicate on the "router" field.
func RouterLT(v string) predicate.AmisSchema {
	return predicate.AmisSchema(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRouter), v))
	})
}

// RouterLTE applies the LTE predicate on the "router" field.
func RouterLTE(v string) predicate.AmisSchema {
	return predicate.AmisSchema(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRouter), v))
	})
}

// RouterContains applies the Contains predicate on the "router" field.
func RouterContains(v string) predicate.AmisSchema {
	return predicate.AmisSchema(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRouter), v))
	})
}

// RouterHasPrefix applies the HasPrefix predicate on the "router" field.
func RouterHasPrefix(v string) predicate.AmisSchema {
	return predicate.AmisSchema(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRouter), v))
	})
}

// RouterHasSuffix applies the HasSuffix predicate on the "router" field.
func RouterHasSuffix(v string) predicate.AmisSchema {
	return predicate.AmisSchema(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRouter), v))
	})
}

// RouterEqualFold applies the EqualFold predicate on the "router" field.
func RouterEqualFold(v string) predicate.AmisSchema {
	return predicate.AmisSchema(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRouter), v))
	})
}

// RouterContainsFold applies the ContainsFold predicate on the "router" field.
func RouterContainsFold(v string) predicate.AmisSchema {
	return predicate.AmisSchema(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRouter), v))
	})
}

// SchemaEQ applies the EQ predicate on the "schema" field.
func SchemaEQ(v string) predicate.AmisSchema {
	return predicate.AmisSchema(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSchema), v))
	})
}

// SchemaNEQ applies the NEQ predicate on the "schema" field.
func SchemaNEQ(v string) predicate.AmisSchema {
	return predicate.AmisSchema(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSchema), v))
	})
}

// SchemaIn applies the In predicate on the "schema" field.
func SchemaIn(vs ...string) predicate.AmisSchema {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AmisSchema(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSchema), v...))
	})
}

// SchemaNotIn applies the NotIn predicate on the "schema" field.
func SchemaNotIn(vs ...string) predicate.AmisSchema {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AmisSchema(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSchema), v...))
	})
}

// SchemaGT applies the GT predicate on the "schema" field.
func SchemaGT(v string) predicate.AmisSchema {
	return predicate.AmisSchema(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSchema), v))
	})
}

// SchemaGTE applies the GTE predicate on the "schema" field.
func SchemaGTE(v string) predicate.AmisSchema {
	return predicate.AmisSchema(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSchema), v))
	})
}

// SchemaLT applies the LT predicate on the "schema" field.
func SchemaLT(v string) predicate.AmisSchema {
	return predicate.AmisSchema(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSchema), v))
	})
}

// SchemaLTE applies the LTE predicate on the "schema" field.
func SchemaLTE(v string) predicate.AmisSchema {
	return predicate.AmisSchema(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSchema), v))
	})
}

// SchemaContains applies the Contains predicate on the "schema" field.
func SchemaContains(v string) predicate.AmisSchema {
	return predicate.AmisSchema(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSchema), v))
	})
}

// SchemaHasPrefix applies the HasPrefix predicate on the "schema" field.
func SchemaHasPrefix(v string) predicate.AmisSchema {
	return predicate.AmisSchema(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSchema), v))
	})
}

// SchemaHasSuffix applies the HasSuffix predicate on the "schema" field.
func SchemaHasSuffix(v string) predicate.AmisSchema {
	return predicate.AmisSchema(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSchema), v))
	})
}

// SchemaEqualFold applies the EqualFold predicate on the "schema" field.
func SchemaEqualFold(v string) predicate.AmisSchema {
	return predicate.AmisSchema(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSchema), v))
	})
}

// SchemaContainsFold applies the ContainsFold predicate on the "schema" field.
func SchemaContainsFold(v string) predicate.AmisSchema {
	return predicate.AmisSchema(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSchema), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.AmisSchema {
	return predicate.AmisSchema(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.AmisSchema {
	return predicate.AmisSchema(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.AmisSchema {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AmisSchema(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.AmisSchema {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AmisSchema(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.AmisSchema {
	return predicate.AmisSchema(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.AmisSchema {
	return predicate.AmisSchema(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.AmisSchema {
	return predicate.AmisSchema(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.AmisSchema {
	return predicate.AmisSchema(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.AmisSchema {
	return predicate.AmisSchema(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.AmisSchema {
	return predicate.AmisSchema(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.AmisSchema {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AmisSchema(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.AmisSchema {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AmisSchema(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.AmisSchema {
	return predicate.AmisSchema(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.AmisSchema {
	return predicate.AmisSchema(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.AmisSchema {
	return predicate.AmisSchema(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.AmisSchema {
	return predicate.AmisSchema(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AmisSchema) predicate.AmisSchema {
	return predicate.AmisSchema(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AmisSchema) predicate.AmisSchema {
	return predicate.AmisSchema(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AmisSchema) predicate.AmisSchema {
	return predicate.AmisSchema(func(s *sql.Selector) {
		p(s.Not())
	})
}
