// Code generated by entc, DO NOT EDIT.

package ent

import (
	"antd-pro-amis-server/rpc/ent/menurole"
	"antd-pro-amis-server/rpc/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MenuRoleUpdate is the builder for updating MenuRole entities.
type MenuRoleUpdate struct {
	config
	hooks    []Hook
	mutation *MenuRoleMutation
}

// Where appends a list predicates to the MenuRoleUpdate builder.
func (mru *MenuRoleUpdate) Where(ps ...predicate.MenuRole) *MenuRoleUpdate {
	mru.mutation.Where(ps...)
	return mru
}

// SetRoleName sets the "role_name" field.
func (mru *MenuRoleUpdate) SetRoleName(s string) *MenuRoleUpdate {
	mru.mutation.SetRoleName(s)
	return mru
}

// SetUpdatedAt sets the "updated_at" field.
func (mru *MenuRoleUpdate) SetUpdatedAt(t time.Time) *MenuRoleUpdate {
	mru.mutation.SetUpdatedAt(t)
	return mru
}

// Mutation returns the MenuRoleMutation object of the builder.
func (mru *MenuRoleUpdate) Mutation() *MenuRoleMutation {
	return mru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mru *MenuRoleUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	mru.defaults()
	if len(mru.hooks) == 0 {
		affected, err = mru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MenuRoleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mru.mutation = mutation
			affected, err = mru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mru.hooks) - 1; i >= 0; i-- {
			if mru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mru *MenuRoleUpdate) SaveX(ctx context.Context) int {
	affected, err := mru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mru *MenuRoleUpdate) Exec(ctx context.Context) error {
	_, err := mru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mru *MenuRoleUpdate) ExecX(ctx context.Context) {
	if err := mru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mru *MenuRoleUpdate) defaults() {
	if _, ok := mru.mutation.UpdatedAt(); !ok {
		v := menurole.UpdateDefaultUpdatedAt()
		mru.mutation.SetUpdatedAt(v)
	}
}

func (mru *MenuRoleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   menurole.Table,
			Columns: menurole.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: menurole.FieldID,
			},
		},
	}
	if ps := mru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mru.mutation.RoleName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menurole.FieldRoleName,
		})
	}
	if value, ok := mru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: menurole.FieldUpdatedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{menurole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// MenuRoleUpdateOne is the builder for updating a single MenuRole entity.
type MenuRoleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MenuRoleMutation
}

// SetRoleName sets the "role_name" field.
func (mruo *MenuRoleUpdateOne) SetRoleName(s string) *MenuRoleUpdateOne {
	mruo.mutation.SetRoleName(s)
	return mruo
}

// SetUpdatedAt sets the "updated_at" field.
func (mruo *MenuRoleUpdateOne) SetUpdatedAt(t time.Time) *MenuRoleUpdateOne {
	mruo.mutation.SetUpdatedAt(t)
	return mruo
}

// Mutation returns the MenuRoleMutation object of the builder.
func (mruo *MenuRoleUpdateOne) Mutation() *MenuRoleMutation {
	return mruo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mruo *MenuRoleUpdateOne) Select(field string, fields ...string) *MenuRoleUpdateOne {
	mruo.fields = append([]string{field}, fields...)
	return mruo
}

// Save executes the query and returns the updated MenuRole entity.
func (mruo *MenuRoleUpdateOne) Save(ctx context.Context) (*MenuRole, error) {
	var (
		err  error
		node *MenuRole
	)
	mruo.defaults()
	if len(mruo.hooks) == 0 {
		node, err = mruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MenuRoleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mruo.mutation = mutation
			node, err = mruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mruo.hooks) - 1; i >= 0; i-- {
			if mruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (mruo *MenuRoleUpdateOne) SaveX(ctx context.Context) *MenuRole {
	node, err := mruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mruo *MenuRoleUpdateOne) Exec(ctx context.Context) error {
	_, err := mruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mruo *MenuRoleUpdateOne) ExecX(ctx context.Context) {
	if err := mruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mruo *MenuRoleUpdateOne) defaults() {
	if _, ok := mruo.mutation.UpdatedAt(); !ok {
		v := menurole.UpdateDefaultUpdatedAt()
		mruo.mutation.SetUpdatedAt(v)
	}
}

func (mruo *MenuRoleUpdateOne) sqlSave(ctx context.Context) (_node *MenuRole, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   menurole.Table,
			Columns: menurole.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: menurole.FieldID,
			},
		},
	}
	id, ok := mruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MenuRole.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, menurole.FieldID)
		for _, f := range fields {
			if !menurole.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != menurole.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mruo.mutation.RoleName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menurole.FieldRoleName,
		})
	}
	if value, ok := mruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: menurole.FieldUpdatedAt,
		})
	}
	_node = &MenuRole{config: mruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{menurole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
